Please answer the below core-java Questions:

What is programing language?
A. A programming language is a vocabulary and set of grammatical rules for instructing a computer or computing device to
perform specific tasks. The term programming language usually refers to high-level languages, such as BASIC, C, C++,
COBOL, Java, FORTRAN, Ada, and Pascal. Each programming language has unique set of keywords (words that it understands)
and a special syntax for organizing and executing program instructions.

What jdk contains or composed of and define each components?
A. JDK (Java Development Kit) provides all the tools, executables and binaries required to compile, debug and execute
a Java Program. The execution part is handled by JVM to provide machine independence. It is a bundle of software
components that is used to develop Java based applications. JVM (Java Virtual Machine), JRE (Java Run time Environment)
and Development tools make the JDK.
The components of JDK are:
 a) Java Compiler: Java compiler is javac tool located in /bin folder of the JDK installation directory.
 b) Java Interpreter: Java interpreter is used to interpret the .class Java files that have been compiled by Java compiler (javac).
 c) Java Disassembler: The javap command is the disassembly tool of JDK that disassembles one or more class files.
 d) Java Header File Generator: Java Header File Generator (javah command-line tool) generates C header and
   source files that are needed to implement native methods.
 e) Java Documentation: Java Documentation helps to maintain code.
 f) Java Debugger: The Java Debugger, jdb, is a simple command-line debugger for Java classes.
 g) Java Applet Viewer: This is used to view the Java applets. The appletviewer command connects to the documents.

What is IDE?
A. A Java IDE (for Integrated Development Environment) is a software application which enables users to more easily
write and debug Java programs.

What are the IDEs available in the market to support Java?
A. Following are some IDEs to support Java:
 a) NetBeans : is an open source Integrated Development Environment written in Java.
 b) Eclipse : is another free Java IDE for developers and programmers. It is mostly written in Java.
 c) IntelliJ IDEA : it is mainly used for Android app development, Scala, Groovy, Java SE and Java programming.
 d) Android Studio : this is from Google is mainly designed for developing on the Android Platform.
 e) Enide Studio : was initially released as a stand-alone product for all operating systems, but it later was changed.
 f) BlueJ : it has been mainly developed for educational purposes.
 g) JEdit : is a text editor with hundreds (counting the time developing plugins) of person-years of development behind it.
 h) jGRASP : is a lightweight IDE, primarily created for automatic generation of software visualizations.
 i) JSource : is a good option for Java developers and programmers.
 j) JDeveloper : is an IDE supplied by the Oracle Corporation and released as freeware.

Explain the entire java life cycle.
A. There are three main stages in the life cycle of a java program. They are:

   a) Editing the program : you will start with typing the program in a text-editor (ex: notepad, notepad++, wordpad,
      textedit etc). After completing editing of the program, we have to save the file. While saving the file you should
      remember that the file must be saved with .java extension.
   b) Compiling the source code: the name of the Java compiler is javac. The input to the compiler is Java source code
      which is available in Sample.java. The output of the compiler is machine independent or platform independent code
      which is known as bytecode. The file which is generated after compilation is .class file.
   c) Executing the byte code: The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM).
      Input to the JVM is bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU of the
      local machine. JVM converts it to binary and send to operating system for output. In JVM, it goes through class
      loader, byte verifier and execution engine (JIT code generator).

what is class?
A. Class is a user defined blueprint or prototype from which objects are creations can include following components:
   a) Modifiers : A class can be public or has default access.
   b) Class name: The name should begin with a initial letter (capitalized by conveed.
   c) Superclass(if any): The name of the class’s parent (superclass).
   d) Interfaces(if any): A comma-separated list of interfaces implemented by the class.
   e) Body: The class body surrounded by braces, { }.

What is object?
A. Object is the combination of data and procedures. It is a basic unit of Object Oriented Programming and represents
 the real life entities. A typical Java program creates many objects,interact by invoking methods. An object consists of:

   a) State : It is represented by attributes of an object. It also reflects the properties of an object.
   b) Behavior : It is represented by methods of an object. It also reflects the response of an object with other objects.
   c) Identity : It gives a unique name to an object and enables one object to interact with other objects.

What is the entry point of an application?
A. An application entry point identifies a resource that is an access point to an application. Application entry points
   are used to control users' access to different versions of an application that is deployed on a platform. They are
   also used to create an application context to monitor the resource usage for applications and to identify an
   application being run. PROGRAM, URIMAP, and TRANSACTION resources can be declared as application entry points.
   main() is the entry point of any standalone java application.

Why main is static?
A. Java program's main method has to be declared static because keyword static allows main to be called without creating
   an object of the class in which the main method is defined. If we omit static keyword before main Java program will
   successfully compile but it won't execute.

Which class is the superclass of all classes?
A. java.lang.Object is a super class of any class by default. The root class of the Java class hierarchy. All
   non-primitive types (including arrays) inherit either directly or indirectly from this class. Object is the super
   class of all other classes we use, including the ones we implemented.

What is difference between path and classpath variables?
A. PATH is an environment variable used by the operating system to locate the executables. That’s why when we install
   Java or want any executable to be found by OS, we need to add the directory location in the PATH variable.
   Classpath is specific to java and used by java executables to locate class files. We can provide the classpath
   location while running java application and it can be a directory, ZIP files, JAR files etc.

What is the difference between an Interface and Abstract class?
A. a) An abstract class can provide complete, default code and/or just the details that have to be overridden.
      An interface cannot provide any code at all,just the signature.
   b) In case of abstract class, a class may extend only one abstract class.
      A Class may implement several interfaces.
   c) An abstract class can have non-abstract methods. All methods of an Interface are abstract.
   d) An abstract class can have instance variables. An Interface cannot have instance variables.
   e) An abstract class can have any visibility: public, private, protected. An Interface visibility must be public or none.
   f) An abstract class can contain constructors. An Interface cannot contain constructors.
   g) Abstract classes are fast. Interfaces are slow as it requires extra indirection to find corresponding method
      in the actual class.

Can you make an Object from an Interface and Abstract class ? if not how do you use it ?
A. No, there are two ways we can achieve this.
  a) Either you extend / implement the Abstract class / interface in a new class, create the object of this new class
     and then use this object as per your need.
  b) The Compiler allows you to create anonymous objects of the interfaces in our code.

what is Access Specifier?
A. In Java, access specifiers are the keywords used before a class name which defines the access scope.
   The types of access specifiers for classes are:
   1. Public : Class,Method,Field is accessible from anywhere.
   2. Protected:Method,Field can be accessed from the same class to which they belong or from the sub-classes,
      and from the class of same package,but not from outside.
   3. Default: Method,Field,class can be accessed only from the same package and not from outside of it's native package.
   4. Private: Method,Field can be accessed from the same class to which they belong.

What is OOP ? Define each feature of java OOP.
A. Object-oriented programming (OOP) refers to a type of computer programming (software design) in which programmers
   define not only the data type of a data structure, but also the types of operations (functions) that can be applied
   to the data structure.

What is Java Package and which package is imported by default?
A. A package is a namespace that organizes a set of related classes and interfaces. The Java platform provides an
   enormous class library (a set of packages) suitable for use in our own applications. This library is known as the
   "Application Programming Interface", or "API" for short.
   Three packages are imported by default for each source file. First, the package with no name. Second, the
   java.lang package. And third, the current package (the package in which the current file is defined).

What is API? Name list of API that you have used so far.
A. Application program interface (API) is a set of routines, protocols, and tools for building software applications.
   An API specifies how software components should interact. A good API makes it easier to develop a program by
   providing all the building blocks. A programmer then puts the blocks together,and build his own application.

   List of API that we have used:
   1. java.io	            Provides for system input and output through data streams, serialization and the file system.
   2. java.math	            Provides classes for various math operation
   3. java.lang	            Provides classes that are fundamental to the design of the Java programming language.
   4. java.util	            Contains the collections framework, legacy collection classes
   5. java.util.jar	        Provides classes for reading and writing the JAR (Java Archive) file format
   6. java.sql	            Provides the API for accessing and processing data stored in a data source

Does java support multiple inheritance, explain why or why not?
A. No, Java does not support multiple inheritance. The problem with multiple inheritance is that if multiple parent
   classes have a same method name, then at runtime it becomes difficult for the compiler to decide which method to
   execute from the child class. The problem is commonly referred as Diamond Problem.

What is method overloading and when it happens?
A. Method Overloading is a feature that allows a class to have more than one method having the same name, if their
   argument lists are different. It is similar to constructor overloading.
   Method overloading happens in compile time. So, it is also called compile time polymorphism.

Explain exceptions in java and how to handle it.
A. Exceptions are conditions that occur because of bad input or human error etc. e.g. FileNotFoundException will be
   thrown if the specified file does not exist. Or a NullPointerException will take place if you try using a null reference.
   The classes that extend Throwable class except RuntimeException and Error are known as checked exceptions. Examples
   are IOException, SQLException etc. •	The classes that extend RuntimeException are known as unchecked exceptions.
   Example: ArithmeticException, NullPointerException etc.
   There are five keywords used to handle exceptions in java:
   1.	try
   2.	catch
   3.	finally
   4.	throw
   5.	throws

What is static keyword in java? How it has been used in variables and methods ?
A. The static keyword in Java is used for memory management mainly. We can apply java static keyword with variables,
   methods, blocks and nested class. The static keyword belongs to the class than an instance of the class.
   The static keyword in Java means that the variable or function is shared between all instances of that class as it
   belongs to the type. The static can be:

                        Variable (also known as a class variable)
                        Method (also known as a class method)
                        Block
                        Nested class
   If you declare any variable as static, it is known as a static variable. The static variable gets memory only once
   in the class area at the time of class loading. If you apply static keyword with any method, it is known as static
   method. A static method belongs to the class rather than the object of a class and can be invoked without the need
   for creating an instance of a class. When there is a requirement to share a method or a variable between multiple
   objects of a class instead of creating separate copies for each object, we use static keyword to make a method or
   variable shared for all objects.

What is final and how it has been used variables and methods?
A. Final is used to apply restrictions on class, method and variable. Final class can’t be inherited, final method can’t
   be overridden and final variable value can’t be changed. Use of final variable:

            public class Test {
                       public static void main(String args[]) {
                              final int i = 10;
                              i = 30; // Error because i is final. }
                               }

What is final, finally and finalize?
A. Final is a keyword. Finally is a block. Finalize is a method.
   Final is used to apply restrictions on class, method and variable. Final class can't be inherited, final method can't
   be overridden and final variable value can't be changed. Finally is used to place important code, it will be executed
   whether exception is handled or not. Finalize is used to perform clean up processing just before object is garbage collected.

What is a constructor ?
A. In Java, constructor refers to a block of code which is used to initialize an object. It must have the same name as
   that of the class. Also, it has no return type and it is automatically called when an object is created.
   There are two types of constructors:
   1.	Default constructor
   2.	Parameterized constructor

Can we have multiple constructors in a class?
A. A class can have multiple constructors, as long as their signature (the parameters they take) are not the same.
   We can define as many constructors as we need. When a Java class contains multiple constructors, we say that the
   constructor is overloaded. This is what constructor overloading means, that a Java class contains multiple constructors.

If we don't have a constructor declared, what is called during the object creation?
A. Then compiler creates default constructor. It is essentially a non-parameterized constructor, i.e. it doesn't accept
   arguments. The default constructor's job is to call the super class constructor and initialize all instance variables.

What is "this" keyword in java ?
A. THIS is a reference variable in Java that refers to the current object.
   Here is given the 6 usage of java this keyword.
        this can be used to refer current class instance variable.
        this can be used to invoke current class method (implicitly)
        this() can be used to invoke current class constructor.
        this can be passed as an argument in the method call.
        this can be passed as argument in the constructor call.
        this can be used to return the current class instance from the method

What is "super" keyword in java? How many possible way can you use?
A. The super keyword in Java is a reference variable which is used to refer immediate parent class object. Whenever we
   create the instance of subclass, an instance of parent class is created implicitly which is referred by super
   reference variable. Usage of Java super Keyword :
        super can be used to refer immediate parent class instance variable.
        super can be used to invoke immediate parent class method.
        super() can be used to invoke immediate parent class constructor.

What is JVM stand for ?
A. It stands for Java Virtual Machine. It is an abstract machine. It is a specification that provides run-time
   environment in which java bytecode can be executed.

Is JVM platform independent?
A. The JVM must be platform dependent to allow our Java program to run on the specific platform. A JVM for Windows will
   translate Java into different system calls than a JVM for OS X. In fact they are platform specific run time
   environment provided by the vendor.

What version of java are you using?
A. Java 8 or 1.8

What is JAR stand for ?
A. JAR stands for Java ARchive. It's a file format based on the popular ZIP file format and is used for aggregating many
   files into one. Although JAR can be used as a general archiving tool, the primary motivation for its development was
   so that Java applets and their requisite components (.class files, images and sounds) can be downloaded to a browser.

What is the difference between JDK and JVM?
A. JDK stands for Java Development Kit. JVM stands for Java Virtual Machine.
   JDK is the tool necessary to compile, document and package Java programs whereas JVM is an abstract machine.
   It is a specification that provides run-time environment in which java bytecode can be executed.
   JDK = JRE (JVM + Library Classes) + Development Tool
   JVM follows three notations: Specification, Implementation and Runtime Instance.

What is the difference between JVM and JRE?
A. JVM stands for Java Virtual Machine. JRE stands for Java Runtime Environment.
   JVM is an abstract machine. JRE refers to a runtime environment in which java bytecode can be executed.
   JRE is a software package that contains what is required to run a Java program. Basically, it’s an implementation of
   the JVM which physically exists.
   JRE = JVM + Library Classes

What is compile time and run time?
A. Compile time and runtime are two distinctly different times during the active life of a computer
   program. Compile time is when the program is compiled; runtime is when it executes (on either
   a physical or virtual computer).

What is heap?
A. Heap is the portion of memory where dynamically allocated memory resides. Whenever an object is created, it’s always
   stored in the Heap space. Objects stored in the heap are globally accessible.

How java manage it's memory?
A. Heap memory is used by all the parts of application whereas stack memory is used only by one thread of execution.
   Whenever an object is created, it’s always stored in the Heap space and stack memory contains the reference to it.
   Stack memory only contains local primitive variables and reference variables to objects in heap space. Memory
   management in the stack is done in a LIFO manner whereas it is more complex in Heap memory because it’s used globally.

What is the difference between String, StringBuffer and StringBuilder?
A. The object created as a String is stored in the  Constant String Pool. The object created through StringBuffer and
   StringBuilder are stored in the heap and can be modified. The major differences are:
   1. String is immutable whereas StringBuffer and StringBuider are mutable classes.
   2. StringBuffer is thread safe and synchronized whereas StringBuilder is not, thats why StringBuilder is more faster
      than StringBuffer.
   3. String concat + operator internally uses StringBuffer or StringBuilder class.
   4. For String manipulations in non-multi threaded environment, we should use StringBuilder else use StringBuffer class.

What is Singleton class?
A. Singleton class is a class whose only one instance can be created at any given time, in one JVM. A class can be made
   singleton by making its constructor private.

What is Serialization and Deserialization?
A. We can convert a Java object to a Stream that is called Serialization. Once an object is converted to Stream, it can
   be saved to file or send over the network or used in socket connections. The object should implement Serializable
   interface and we can use java.io.ObjectOutputStream to write object to file or to any OutputStream object.
   The process of converting stream data created through serialization to Object is called deserialization.

when to use transient variable in java?
A. A transient variable is a variable that can not be serialized. Variables may be marked transient to indicate that
   they are not part of the persistent state of an object.

Difference between while and do..while loop?
A. While loop is used when certain statements need to be executed repeatedly until a condition is fulfilled. In while
   loops, condition is checked first before execution of statements. Do While Loop is same as While loop with only
   difference that condition is checked after execution of block of statements. Hence in case of do while loop,
   statements are executed at least once.

What is Enum?
A. An enum is a special "class" that represents a group of constants (unchangeable variables, like final variables).
   To create an enum, use the enum keyword (instead of class or interface), and separate the constants with a comma.
   Mentionable that they should be in uppercase letters. Enum is short for "enumerations", means "specifically listed".

What is Iterator?
A. The Java Iterator interface represents an object capable of iterating through a collection of Java objects, one
object at a time. The Iterator interface is one of the oldest mechanisms in Java for iterating collections of objects.

Which one will take more memory, an int or Integer?
A. An integer, which is arbitrarily large. An int is bounded by the definition of programming your language. Therefore
   int will take less memory than Integer.

Why is String Immutable in Java?
A. String is immutable in Java. An immutable class is simply a class whose instances cannot be modified. All information
   in an instance is initialized when the instance is created and the information can not be modified.
   In general, strings are used to represent the vital details like database connection urls, username passwords etc.
   The immutability of strings helps to keep such details unchanged. Similarly String is used as argument while loading
   the class. At that time change in the string may result in loading the wrong class.

What is constructor chaining in Java?
A. Constructor chaining is the process of calling one constructor from another constructor with respect to current object.
   Constructor chaining can be done in two ways:
        1. Within same class: It can be done using this() keyword for constructors in same class
        2. From base class: by using super() keyword to call constructor from the base class.
   Constructor chaining occurs through inheritance.

The difference between Serial and Parallel Garbage Collector?
A. Both the serial and parallel collectors cause a stop-the-world during the Garbage Collection (GC).
   A serial collector is a default copying collector which uses only one GC thread for the GC operation, while a
   parallel collector uses multiple GC threads for the GC operation.

What is JIT stands for?
A. The JIT (Just-in-Time) compiler is enabled by default, and is activated when a Java method is called. The JIT
   compiler compiles the bytecode of that method into native machine code, compiling it "just in time" to run.

Explain Java Heap space and Garbage collection?
A. Java objects reside in an area called the heap. The heap is created when the JVM starts up and may increase or
   decrease in size while the application runs. When the heap becomes full, garbage is collected. During the garbage
   collection objects that are no longer used are cleared, thus making space for new objects. The JVM uses more memory
   than just the heap. For example Java methods, thread stacks and native handles are allocated in memory separate from
   the heap, as well as JVM internal data structures. The heap is sometimes divided into two areas (or generations)
   called the nursery (or young space) and the old space. The nursery is a part of the heap reserved for allocation of
   new objects. When the nursery becomes full, garbage is collected by running a special young collection, where all
   objects that have lived long enough in the nursery are promoted (moved) to the old space, thus freeing up the nursery
   for more object allocation. When the old space becomes full garbage is collected there, a process called an old collection.

Can you guarantee the garbage collection process?
A. Java garbage collection is an automatic process to manage the runtime memory used by programs. By doing it automatic
   JVM relieves the programmer of the overhead of assigning and freeing up memory resources in a program.
   Being an automatic process, programmers need not initiate the garbage collection process explicitly in the code.
   System.gc() and Runtime.gc() are hooks to request the JVM to initiate the garbage collection process.
   Just before evicting an instance and reclaiming the memory space, the Java garbage collector invokes the finalize()
   method of the respective instance so that the instance will get a chance to free up any resources held by it.

What is the difference between stack and heap in Java?
A. Differences between stack and heap in Java are:
   1. Heap memory is used by all the parts of the application whereas stack memory is used only by one thread of execution.
   2. Whenever an object is created, it’s always stored in the Heap space and stack memory contains the reference to it.
   3. Objects stored in the heap are globally accessible whereas stack memory can’t be accessed by other threads.
   4. Stack memory is short-lived whereas heap memory lives from the start till the end of application execution.
   5. Stack memory size is very less when compared to Heap memory.

What is reflection in java and why is it useful?
A. Java Reflection is the process of analyzing and modifying all the capabilities of a class at runtime.
   One advantage of reflection API in Java is, it can manipulate private members of the class too.
   Reflection lets you create instances of new objects or execute methods at run-time without necessarily knowing what
   objects you are instantiating! It is also a great tool for debugging your program because you can see what is being
   executed on the fly.

what is multithreading in java?
A. Multithreading is a Java feature that allows concurrent execution of two or more parts of a program for maximum
   utilization of CPU. Each part of such program is called a thread. So, threads are light-weight processes within a
   process. Threads created by using 2 mechanisms : Extending the Thread class and Implementing the Runnable Interface.

What is the use of synchronization in Java?
A. In multi-threading, access to the resources which are shared among multiple threads can be controlled by using the
   concept of synchronization. Using synchronized keyword, we can ensure that only one thread can use shared resource at
   a time and others can get control of the resource only once it has become free from the other one using it.

What is Framework?
A. Frameworks are large bodies (usually many classes) of prewritten code to which you add your own code to solve a
   problem in a specific domain. Frameworks are the substance of programming. You build on top of a good one, your
   program is solid and fast and comes together beautifully.

What are the testing Framework available in java?
A. Testing Framework available in Java are:
    1. JUnit : Almost all major IDEs, e.g. Eclipse, NetBeans, and IntelliJ, provide JUnit integrations.
    2. REST Assured : Testing and validating REST services in Java is little harder.
    3. Selenium : It is probably the most popular tool for Java UI testing.
    4. TestNG : This testing framework is inspired by JUnit and NUnit.
    5. Mockito : It is one of the essential techniques of modern-day unit testing.
    6. Spock Framework : It  is compatible with most IDEs, build tools, and continuous integration servers.
    7. Cucumber : It is another great tool for automated integration tests.
    8. Spring Test : It comes with a very useful test framework that allows doing in-depth testing.
    9. DBUnit : It is a JUnit extension.

Difference between jUnit and testNG?
A. Differences between jUnit and testNG are:
    1. JUnit is an open source testing framework used for writing and running tests. TestNG is another
       testing framework similar to Junit, but with added functionalities and features.
    2. Junit does not support advanced annotations, but testNG supports that.
    3. Junit does not support parallel test execution, testNG allows different threads to run in parallel.
    4. Group test features does not exist in JUnit. For TestNg, it is a innovative feature.
    5. Process of configuration of parameterized test is much easier in TestNG than JUnit.

What are the dependencies for this project?
A. Dependencies for this project are:
    1. Connecting to SQL and MongoDB
    2. Execution of secret.properties
    3. Installation of Driver, Libraries and jar
    4. Successful operation of imported libraries


what is dependency injection in java?
A. Dependency injection can be used without any additional framework by providing classes with sufficient constructors
   or getter and setter methods. A dependency injection framework simplifies the initialization of the classes with the
   correct objects. Java Dependency Injection design pattern allows us to remove the hard-coded dependencies and make
   our application loosely coupled, extendable and maintainable. We can implement dependency injection in java to move
   the dependency resolution from compile-time to runtime.

What is static binding and dynamic binding?
A. When type of the object is determined at compiled time(by the compiler), it is known as static or early binding.
   When type of the object is determined at run-time, it is known as dynamic binding. Static binding is better on the
   basis of performance. Static binding uses Type information for binding while Dynamic binding uses Objects to resolve
   binding. Overloaded methods are resolved using static binding while overridden methods using dynamic binding, i.e,
   at run time.









